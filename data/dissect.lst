# a comment before import
include (
  "blocks.lst"
  "funcs.lst"
)

# define constants
define (
  Version = 1
  Nine = 9
)

# declare parameters for blocks and data
declare (
  param0[size=32, type=u32, offset=Nine, expect=Version]
  param1[size=32, type=u32]
  param2[size=32, type=u32]
  param3[size=32, type=u32]

  integer4[size=32, type=i32]
  integer5[size=32, type=i32]
  integer6[size=32, type=i32]

  float7[size=32, type=f32]
  float8[size=32, type=f32]
  float9[size=32, type=f32]

  boolean0[size=32]
)

# enum block are introduced with the keyword enum follow by an ident
enum KO_OK (
  0 = KO
  1 = OK
)

polynomial Eighty7 (
  0 = 87
  1 = 0.3
  2 = -1.2
)

block param (
  param0
  param1
  param2
  param3
)

block int1 (
  integer4
  integer5
)

block int2 (
  integer5
  integer6
)

block float1 (
 float7
 float8
)

block float2 (
 float7
 float8
 float10[type=f32]
)

block empty (
  empty0[size=1]
  empty1[size=2]
)

block misc1 (
  param0
  integer4
  float7
  boolean0

  include empty
  include[boolean0==true] empty
)

data (
  ident0[offset=0, type=u8, size=8, transform=KO_OK]
  ident1[offset=0, type=u8, size=8, transform=KO_OK]
  param0
  include param

  include[!(ident0 == 1 || ident0 >= 2) && ident2 != 3] param
  include[ident1 == 2] (
    include int1
    param2
    include int2
    include[ident1 > 2] (
      integer5
      integer6
      include misc1
    )
  )

  ident5[type=i8, transform=Eighty7]
  ident6[type=i8]
  include float2

  del ident5
  let ident5 = ident5 + ident4 + 3

  seek 16

  repeat 2 param
  repeat 10 (
    ident8[size=10]
    ident9[size=10]
    ident7[size=4]
  )
)
